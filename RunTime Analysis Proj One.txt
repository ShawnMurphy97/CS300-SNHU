Given each of the data structures, they each have their own benefits. Using a vector is very one-dimensional which is a benefit for this project at it’s current stage as what we are doing is just parsing lines of a file and sorting/handling the courses that are within. Where the fault is, would be that elements cannot be deleted as well as not being able to hold multiple different data types. That being said it’s speed is something that cannot be glossed over. The vector can run as quickly as a binary search tree however it is only in theory albeit vectors do run faster than hashtables.

Using a hashtable, the data can be very easily stored and organized as well as through using a key is simple to call the information. Along with this you have the ability to manipulate the data through creation and deletion. However a side effect of the synchronization that is possible is that the Hashtable runs the slowest out of the data structures. That being said, the flexibility of it really is a very big selling point.

With the Binary Search Tree, you are given better management of the data, this is through the use the branching left and right nodes. While modification of the BST is slower than that of the vector it does allow for deletion of elements. BSTs also provide the ability to search through, create and delete elements.

When choosing a data structure for the project I would recommend using a BST over the other two. This is because it would be able to provide a more linear view of the prerequisites for each course and their relationships to each other. Not only this but it provides the creation, deletion and modification of elements providing easier manipulation in the future in the event that courses are either added, deleted or reworked. Not only this but the Hashtable is less memory-efficient than a BST. These are the reasons why I would choose to use a Binary SearchTree over using either a Vector or a Hashtable.